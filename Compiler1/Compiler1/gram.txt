grammar gram;

WHITESPACE : [ \t\r\n]+ -> skip;
COMMENT : ('//'~[\n]* | '/*' .*? '*/') -> skip;
SEMI : ';';
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+;
NUM : [0-9]+;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
EQ : '=';
PLUS : [+];
MULOP : [*/%];
MINUS : '-';
CMA : ',';
TYPE : 'int'|'string'|'double';
STRINGCONST : '"' ( '\\"' | ~["] )* '"' ;
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z_][A-Za-z0-9_]*;


program : braceblock EOF;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
returnStmt : RETURN expr;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
rel : sum RELOP sum | sum;
sum : sum PLUS term | sum MINUS term | term;
term : term MULOP neg | neg;
neg : MINUS neg | factor;
factor : NUM | FPNUM | LP expr RP | LP TYPE RP factor;